using System;
using System.Collections.Generic;
using System.IO;
// last version  //Ibrahim abdallah
namespace Examination_System
{
    internal class Program
    {
        // Base Question Class
        public abstract class Question
        {
            public string Header { get; set; }
            public string Body { get; set; }
            public int Marks { get; set; }
            public AnswerList Answers { get; set; }

            protected Question(string header, string body, int marks)
            {
                Header = header;
                Body = body;
                Marks = marks;
                Answers = new AnswerList();
            }

            public abstract void DisplayQuestion();
        }

        // True or False Question
        public class TrueFalseQuestion : Question
        {
            public TrueFalseQuestion(string header, string body, int marks)
                : base(header, body, marks) { }

            public override void DisplayQuestion()
            {
                Console.WriteLine($"{Header} (True/False): {Body}");
            }
        }

        // Choose One Question
        public class ChooseOneQuestion : Question
        {
            public ChooseOneQuestion(string header, string body, int marks)
                : base(header, body, marks) { }

            public override void DisplayQuestion()
            {
                Console.WriteLine($"{Header} (Choose One): {Body}");
                foreach (var answer in Answers)
                {
                    Console.WriteLine($"- {answer.Text}");
                }
            }
        }

        // Choose All Question
        public class ChooseAllQuestion : Question
        {
            public ChooseAllQuestion(string header, string body, int marks)
                : base(header, body, marks) { }

            public override void DisplayQuestion()
            {
                Console.WriteLine($"{Header} (Choose All): {Body}");
                foreach (var answer in Answers)
                {
                    Console.WriteLine($"- {answer.Text}");
                }
            }
        }

        public class QuestionList : List<Question>
        {
            
        }

        public class Answer
        {
            public string Text { get; set; }
            public bool IsCorrect { get; set; }

            public Answer(string text, bool isCorrect)
            {
                Text = text;
                IsCorrect = isCorrect;
            }
        }

        public class AnswerList : List<Answer> { }

        public enum ExamMode { Starting, Queued, Finished }

        public abstract class Exam //: ICloneable//, IComparable<Exam>
        {
            public string Title { get; set; }
            public int TimeLimit { get; set; }
            public int NumberOfQuestions { get; set; }
            public Dictionary<Question, AnswerList> QuestionAnswerDictionary { get; set; }
            public Subject Subject { get; set; }
            public ExamMode Mode { get; set; }

            protected Exam(string title, int timeLimit, int numberOfQuestions, Subject subject)
            {
                Title = title;
                TimeLimit = timeLimit;
                NumberOfQuestions = numberOfQuestions;
                Subject = subject;
                QuestionAnswerDictionary = new Dictionary<Question, AnswerList>();
                Mode = ExamMode.Starting;
            }

            public abstract void ShowExam();

            public object Clone()
            {
                return MemberwiseClone();
            }

            public int CompareTo(Exam other)
            {
                return TimeLimit.CompareTo(other.TimeLimit);
            }

            public override string ToString()
            {
                return $"Exam: {Title}, Subject: {Subject.Name}, Time: {TimeLimit} minutes";
            }

            public override bool Equals(object obj)
            {
                if (obj is Exam other)
                {
                    return Title == other.Title && Subject.Name == other.Subject.Name;
                }
                return false;
            }

            public override int GetHashCode()
            {
                return Title.GetHashCode() ^ Subject.Name.GetHashCode();
            }
        }

        // Practice Exam
        public class PracticeExam : Exam
        {
            public PracticeExam(string title, int timeLimit, int numberOfQuestions, Subject subject)
                : base(title, timeLimit, numberOfQuestions, subject) { }

            public override void ShowExam()
            {
                Console.WriteLine("Practice Exam:");
                int score = 0;
                foreach (var question in QuestionAnswerDictionary.Keys)
                {
                    question.DisplayQuestion();
                    Console.WriteLine("Your Answer:");
                    string userAnswer = Console.ReadLine();

                    bool isCorrect = true;
                    foreach (var answer in QuestionAnswerDictionary[question])
                    {
                        if (answer.IsCorrect.ToString().ToLower() != userAnswer.ToLower())
                        {
                            isCorrect = false;
                        }
                    }

                    if (isCorrect)
                    {
                        score += question.Marks;
                    }
                }

                Console.WriteLine($"Your final score is: {score} / 10");
            }
        }

        public class Subject
        {
            public string Name { get; set; }
            public string Description { get; set; }

            public Subject(string name, string description)
            {
                Name = name;
                Description = description;
            }
        }

        public delegate void ExamModeHandler(string message);

        public class ExamNotifier
        {
            public event ExamModeHandler ExamModeChanged;

            public void NotifyStudents(Exam exam)
            {
                if (exam.Mode == ExamMode.Starting)
                {
                    ExamModeChanged?.Invoke($"Exam '{exam.Title}' is starting. Please prepare.");
                }
            }
        }

        // Final Exam
        public class FinalExam : Exam
        {
            public FinalExam(string title, int timeLimit, int numberOfQuestions, Subject subject)
                : base(title, timeLimit, numberOfQuestions, subject) { }

            public override void ShowExam()
            {
                Console.WriteLine("Final Exam:");
                int score = 0;
                foreach (var question in QuestionAnswerDictionary.Keys)
                {
                    question.DisplayQuestion();
                    Console.WriteLine("Your Answer:");
                    string userAnswer = Console.ReadLine();

                    bool isCorrect = true;
                    foreach (var answer in QuestionAnswerDictionary[question])
                    {
                        if (answer.IsCorrect.ToString().ToLower() != userAnswer.ToLower())
                        {
                            isCorrect = false;
                        }
                    }

                    if (isCorrect)
                    {
                        score += question.Marks;
                    }
                }

                Console.WriteLine($"Your final score is: {score} / 10");
            }
        }

        static void Main(string[] args)
        {
            // Create a subject
            Subject math = new Subject("Mathematics", "Advanced Mathematics");

            // Create questions
            var questions = new List<Question>
            {
                new TrueFalseQuestion("Q1", "Is 2 + 2 = 4?", 1) { Answers = { new Answer("True", true) } },
                new TrueFalseQuestion("Q2", "Is the square root of 9 equal to 3?", 1) { Answers = { new Answer("True", true) } },
                new ChooseOneQuestion("Q3", "What is 3 * 3?", 1)
                {
                    Answers = { new Answer("6", false), new Answer("9", true), new Answer("12", false) }
                },
                new ChooseOneQuestion("Q4", "What is 10 / 2?", 1)
                {
                    Answers = { new Answer("2", false), new Answer("5", true), new Answer("10", false) }
                },
                new ChooseOneQuestion("Q5", "What is the capital of France?", 1)
                {
                    Answers = { new Answer("Berlin", false), new Answer("Paris", true), new Answer("Madrid", false) }
                },
                new ChooseAllQuestion("Q6", "Select prime numbers:", 1)
                {
                    Answers = { new Answer("2", true), new Answer("4", false), new Answer("5", true) }
                },
                new ChooseAllQuestion("Q7", "Select even numbers:", 1)
                {
                    Answers = { new Answer("1", false), new Answer("2", true), new Answer("3", false) }
                },
                new TrueFalseQuestion("Q8", "Is the Earth round?", 1) { Answers = { new Answer("True", true) } },
                new TrueFalseQuestion("Q9", "Is water made of H2O?", 1) { Answers = { new Answer("True", true) } },
                new ChooseOneQuestion("Q10", "What is 2 + 3?", 1)
                {
                    Answers = { new Answer("4", false), new Answer("5", true), new Answer("6", false) }
                }
            };

            // Create exam
            var practiceExam = new PracticeExam("Math Practice", 60, 10, math);
            foreach (var question in questions)
            {
                practiceExam.QuestionAnswerDictionary.Add(question, question.Answers);
            }
            var finalExam = new FinalExam("Math Practice", 60, 10, math);
            foreach (var question in questions)
            {
                finalExam.QuestionAnswerDictionary.Add(question, question.Answers);
            }

            // Notify students
            var notifier = new ExamNotifier();
            notifier.ExamModeChanged += (message) => Console.WriteLine(message);
            notifier.NotifyStudents(practiceExam);

            //Show exam
            Console.WriteLine("Enter 1 for Practice Exam , 2 for Final Exam");
            int x;
            x = int.Parse(Console.ReadLine());
            if (x == 1)
            {
                practiceExam.ShowExam();
            }
            else
            {
                finalExam.ShowExam();
            }
        }
    }
}
